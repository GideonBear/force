name: Build

on:
  push:
    tags:
      - 'v*'


jobs:

  createrelease:
    name: Create release
    runs-on: [ubuntu-latest]
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Output release url file
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save release url file for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt
  
  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            CMD_BUILD: pyinstaller --onefile --name force --paths . .github/workflows/main.py
            OUT_FILE_NAME: force.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-20.04  # glibc version
            CMD_BUILD: pyinstaller --onefile --name force --paths . .github/workflows/main.py
            OUT_FILE_NAME: force
            ASSET_MIME: application/x-elf
          #- os: macos-latest
          #  CMD_BUILD: >
          #      pyinstaller -F -w -n clipster -i resources/clipster.icns cli.py &&
          #      cd dist/ &&
          #      zip -r9 clipster clipster.app/
          #  OUT_FILE_NAME: clipster.zip
          #  ASSET_MIME: application/zip
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - run: pip install -U pip setuptools wheel && pip install -Ur requirements.txt pyinstaller
      - run: ${{matrix.CMD_BUILD}}
      - name: Load Release URL File from release job
        uses: actions/download-artifact@v4
        with:
          name: release_url
      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat release_url/release_url.txt`
          echo ::set-output name=upload_url::$value
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ./dist/${{ matrix.OUT_FILE_NAME}}
          asset_name: ${{ matrix.OUT_FILE_NAME}}
          asset_content_type: ${{ matrix.ASSET_MIME}}
